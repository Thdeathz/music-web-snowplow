services:
  traefik:
    image: traefik:2.9
    restart: unless-stopped
    command:
      - --api.dashboard=true
      - --entrypoints.http.address=:80
      - --providers.docker
      - --providers.docker.network=${COMPOSE_PROJECT_NAME}_client
      - --providers.docker.watch=true
      - --providers.docker.exposedbydefault=false
      - --providers.zookeeper.endpoints=zookeeper:2181
    ports:
      - ${PORT:-80}:80
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DOMAIN}`)
      - traefik.http.routers.traefik.service=api@internal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  snowplow:
    image: snowplow/snowplow-micro:2.0.0
    restart: unless-stopped
    working_dir: /srv/snowplow
    command: >
      --collector-config /srv/snowplow/collector.conf
      --iglu /srv/snowplow/iglu.json
    volumes:
      - ./snowplow:/srv/snowplow
      - ./snowplow/iglu/schemas:/config/iglu-client-embedded/schemas
    environment:
      - MICRO_IGLU_REGISTRY_URL=http://${IGLU_DOMAIN:-localhost}:${PORT:-8080}/api
      - MICRO_IGLU_API_KEY=${IGLU_SUPER_API_KEY:-5fb4713d-73ad-4163-93a9-2b82f0177c5b}
    labels:
      - traefik.enable=true
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-snowplow.rule=Host(`${SNOWPLOW_DOMAIN}`)
      - traefik.http.services.${COMPOSE_PROJECT_NAME}-snowplow.loadbalancer.server.port=9090
    depends_on:
      - traefik
      - iglu

  api:
    image: node:18-alpine
    restart: unless-stopped
    working_dir: /srv/api
    tty: true
    volumes:
      - ./api:/srv/api
    labels:
      - traefik.enable=true
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-api.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)
      - traefik.http.services.${COMPOSE_PROJECT_NAME}-api.loadbalancer.server.port=80
    links:
      - postgres
      - redis
    depends_on:
      - traefik
      - postgres
      - redis

  web:
    image: node:18-alpine
    restart: unless-stopped
    working_dir: /srv/web
    tty: true
    volumes:
      - ./web:/srv/web
    labels:
      - traefik.enable=true
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-web.rule=Host(`${DOMAIN}`)
      - traefik.http.services.${COMPOSE_PROJECT_NAME}-web.loadbalancer.server.port=3000
    depends_on:
      - traefik
      - api
      - snowplow

  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - 2181:2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: bitnami/kafka:latest
    ports:
      - 9091:9091
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper

  mongodb:
    image: mongo
    restart: unless-stopped
    ports:
      - 27017:27017
    volumes:
      - ./.data/mongodb:/data/db

  loader:
    image: node:18-alpine
    restart: unless-stopped
    working_dir: /srv/server
    tty: true
    volumes:
      - ./loader-kafka/:/srv/server
    labels:
      - traefik.enable=true
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-loader.rule=Host(`${LOADER_DOMAIN}`)
      - traefik.http.services.${COMPOSE_PROJECT_NAME}-loader.loadbalancer.server.port=4040
    links:
      - kafka
      - snowplow
    depends_on:
      - mongodb

  iglu:
    image: snowplow/iglu-server:0.11.0
    restart: unless-stopped
    working_dir: /snowplow
    volumes:
      - ./snowplow/iglu/server.config.hocon:/snowplow/config/config.hocon
    command: >
      --config /snowplow/config/config.hocon
    environment:
      IGLU_SUPER_API_KEY: ${IGLU_SUPER_API_KEY:-5fb4713d-73ad-4163-93a9-2b82f0177c5b}
      IGLU_DB_PASSWORD: ${IGLU_DB_PASSWORD:-postgres}
    labels:
      - traefik.enable=true
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-iglu.rule=Host(`${IGLU_DOMAIN}`)
      - traefik.http.services.${COMPOSE_PROJECT_NAME}-iglu.loadbalancer.server.port=8080
    depends_on:
      - traefik
      - postgres

  redis:
    image: redis:7.2-alpine
    restart: unless-stopped
    volumes:
      - ./.data/redis:/data
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-redis}
    ports:
      - ${REDIS_PORT:-6379}:6379

  postgres:
    image: postgres:11-alpine
    restart: unless-stopped
    volumes:
      - ./.data/postgres:/var/lib/postgresql/data
      - ./snowplow/iglu/init-database.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
    ports:
      - ${POSTGRES_PORT:-5432}:5432
